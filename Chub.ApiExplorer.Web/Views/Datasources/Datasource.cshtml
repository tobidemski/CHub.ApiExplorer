@using Stylelabs.M.Sdk.Contracts.Base
@model DataSource

@{
    bool isFlat = this.Model.Type == DataSourceType.Flat;
    string name = string.IsNullOrEmpty(this.Model.Label) ? this.Model.Name : this.Model.Label;
}

<div class="container mt-3 g-0">
    <div class="row flex-column-reverse flex-lg-row">
        <div class="col-sm-12 col-md-12 col-lg-9">

            <h4>Datasource Values</h4>

            <table class="table @(isFlat ? "table-striped" : "")">
                <thead class="@(isFlat ? "" : "table-light")">
                    <tr>
                        <th>Identifier</th>
                        <th>Label</th>
                    </tr>
                </thead>
                <tbody>
                    @if (isFlat)
                    {
                        foreach (IDataSourceValue dsValue in this.Model.Values)
                        {
                            <tr>
                                <td>@dsValue.Identifier</td>
                                <td>@name</td>
                            </tr>
                        }
                    }
                    else
                    {
                        //IHierarchicalDataSource? hierachicalDs = this.Model as IHierarchicalDataSource;
                        List<IHierarchicalDataSourceValue> values = this.Model.Values.Cast<IHierarchicalDataSourceValue>().ToList();
                        RenderHierarchicalDataSourceValues(values);
                    }
                </tbody>
            </table>

        </div>

        <div class="col-sm-12 col-md-12 col-lg-3">

            <div class="card border-secondary mb-3 sticky-top">
                <div class="card-header"><b>@name</b></div>
                <!--<div class="card-body">
                   <h4 class="card-title"></h4>
                </div>-->
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Name: @this.Model.Name</li>
                    <li class="list-group-item">Type:
                    @if (this.Model.Type == DataSourceType.Hierarchical)
                    {
                        <i title="@this.Model.Type" class="fa-solid fa-sitemap ms-1"></i>
                    }
                    </li>
                    <li class="list-group-item">System owned: <input class="form-check-input" type="checkbox" disabled @(this.Model.IsSystemOwned ? "checked" : "") /></li>
                    <li class="list-group-item">Created by: @this.Model.CreatedBy</li>
                    <li class="list-group-item">Created on: @this.Model.CreatedOn</li>
                    <li class="list-group-item">Modified by: @this.Model.ModifiedBy</li>
                    <li class="list-group-item">Modifed on: @this.Model.ModifiedOn</li>
                </ul>
            </div>
        </div>
    </div>
</div>


<style>
    table td {
        padding-right: 0 !important;
        padding-left: 0 !important;
    }
</style>

@{
    void RenderHierarchicalDataSourceValues(IList<IHierarchicalDataSourceValue> dsValues)
    {
        for (int i = 0; i < dsValues.Count; i++)
        {
            IHierarchicalDataSourceValue dsValue = dsValues[i];
            bool isLast = i == dsValues.Count - 1;

            bool hasChilds = dsValue.Values.Any();

            <tr>
                <td>@dsValue.Identifier</td>
                <td>@dsValue.Labels[this.Model.CurrentCulture]</td>
            </tr>

            if (hasChilds)
            {
                <tr class="childs">
                    <td colspan="2" class="pt-0 pb-0">
                        <div class="ms-5">
                            <table class="table mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Identifier</th>
                                        <th>Label</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        RenderHierarchicalDataSourceValues(dsValue.Values);
                                    }
                                </tbody>
                            </table>
                        </div>
                    </td>
                </tr>

                @if (!isLast)
                {
                    <tr class="fake">
                        <td colspan="2">
                            <div class="mb-3"></div>
                        </td>
                    </tr>
                }
            }

        }
    }
}

<style>
    tr.fake {
        border-style: hidden !important;
    }

    table > tbody > tr.childs:last-child > td {
        border-bottom: initial !important;
    }

</style>